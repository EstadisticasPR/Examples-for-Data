################################################## ############################
# Utilizamos el software de código abierto para el análisis estadístico llamado R para explorar
# Datos de lluvia en una estación meteorológica. R o RStudio para Windows se pueden descargar en
# Https://cran.r-project.org/bin/windows/base/ o https://www.rstudio.com/products/rstudio/download3/
# Este código se ejecutó en R 3.3.1 el 30 de enero de 2017.
# A diferencia de otros códigos que hemos puesto a disposición, este código requiere que el usuario configure una cuenta con
# NOAA yendo a https://www.ncdc.noaa.gov/cdo-web/token
# Si aparece un error al ejecutar este código, verifique la versión de sus datos y R, ya que pueden haberse producido cambios.
# También tenga en cuenta que el acceso a Internet es necesario para acceder a los datos
# Creado por Roberto Rivera, roberto.rivera30@upr.edu

#NOTE: Cada línea comienza con "#" R lo detecta como un comentario.

# Primero preparamos los paquetes R necesarios para el ejemplo.

# Se crea una función para instalar los paquetes R necesarios para esta aplicación. Función originalmente proporcionada en https://gist.github.com/stevenworthington/3178163
ipak <- function(pkg){
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg)) 
    install.packages(new.pkg, dependencies = TRUE)
  sapply(pkg, require, character.only = TRUE)
}

# Verifica si los paquetes están instalados, si no lo están, se intalarán y cargarán automaticamente
packages <- c("RSocrata","rnoaa", "dplyr", "zoo","xts","hydroTSM")
ipak(packages) # Instala los paquetes necesarios.

# NOAA requiere una clave (contraseña) para que el usuario pueda acceder a sus datos de estación meteorológica. Obtener la clave NOAA en https://www.ncdc.noaa.gov/cdo-web/token
options(noaakey="yVvqgXkoSScLNTzvlltgCGGIloJKOmsL")  #options(noaakey="Insertar código en este espacio") #


station <-read.socrata("https://data.pr.gov/Permisos-y-Ambiente/Weather-Stations-Active-and-inactive-/9na3-9brj")
#station<-station[station$Active=="Yes",] # Si desea enfocar sólo en las estaciones activas puede ejecutar este comando.

# Las siguientes 3 lineas del código identifican todas las estaciones de Puerto Rico
#(stations <- ghcnd_stations())
#who<-stations %>% filter(state == "PR") #who$id son los id's de las estaciones, who$elevation es la elevación de las estaciones, etc.
#unique(who$id) #192 Estaciones únicas, solo disponibles en data.pr.gov

i=which(station[,1]=="RQW00011641")# Aeropuerto de San Juan 

# En las siguientes lineas del código se evalúan los días del mes con los datos disponibles en la estación del aeropuerto de San Juan
stationpre <- ghcnd(stationid=station[i,1])

dat_day <- stationpre%>%filter(element=="PRCP") #filter to just get rainfall data

# Organiza los datos, 
dat_day <- dat_day[,order(names(dat_day))]

# Las siguientes dos funciones cambian el valor de la variable de factor a numérico
asNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],   
                                                   asNumeric))    
dat2<-factorsNumeric(dat_day[,97:127])


dat_day$month <- month.abb[dat_day$month]
dat_day$date <- as.Date(paste("1",dat_day$month,dat_day$year,sep="/"),format="%d/%b/%Y")
# Calcula "Días con datos por mes"
dayspermonth<-apply(dat2, MARGIN = 1, FUN = function(x) length(x[!is.na(x)]) )
dayspermonth<-zoo(dayspermonth,dat_day$date)
plot(dayspermonth, ylab="Días por mes", xlab="Fecha") #Esta figura debe mostrar un patrón fijo. Por lo general lo hace, excepto en octubre de 1997 que faltan unos días y noviembre de 2016 con sólo lluvias para los primeros 21 días

# Para comparación también trazamos los días / mes para la estación de San Juan
j=which(station[,1]=="RQW00011631")
stationpre <- ghcnd(stationid=station[j,1])

dat_day <- stationpre%>%filter(element=="PRCP")

# Organiza los datos, 
dat_day <- dat_day[,order(names(dat_day))]

dat2<-factorsNumeric(dat_day[,97:127])


dat_day$month <- month.abb[dat_day$month]
dat_day$date <- as.Date(paste("1",dat_day$month,dat_day$year,sep="/"),format="%d/%b/%Y")
# Calcula "Días con datos por mes"
dayspermonth<-apply(dat2, MARGIN = 1, FUN = function(x) length(x[!is.na(x)]) )
dayspermonth<-zoo(dayspermonth,dat_day$date)
plot(dayspermonth, ylab="Días por mes", xlab="Fecha")



#####################################################################################################################
# Estaciones del tiempo pueden tener tres tipos de escenarios según los datos: contiene una fecha con una cantidad de lluvia,
# contiene una fecha con una valor faltante o no contiene la fecha, por lo tanto el registro para esa fecha falta . Cuando falta la fecha de un dato, 
# las acumulaciones de datos mensuales y anuales pueden ser engañosas ya que los comandos a continuación no reconocen los meses que faltan. Para corregir
# esta falla, primero creamos un objeto de serie de tiempo genérica con fecha de inicio en la medida en que los datos se acumulan. Luego  
# combinaremmos este objeto con los datos de la estación de lluvia. Esto asegurará que las fechas faltantes de lluvia 
# también se consideran al resumir la lluvia total mensual y anual.

len_obj<-round(as.numeric(difftime(Sys.Date(),"1899-05-01")))

dat_obj <- zoo(1:len_obj, seq(from = as.Date("1899-05-01"),
                              to = Sys.Date(), by = "1 day"))

# Para resumir mensual y diariamente en la estacion del aeropuerto en San Juan, se puede optener los datos diarios pero de una forma conveniente  
dat<-meteo_tidy_ghcnd(stationid = station[i,1], var = "prcp")
dat$prcp<-dat$prcp/10 #Cambia décimas de mm a mm
stationPRCP<-zoo(dat$prcp,dat$date) #Crea un tipo de objeto que representa una serie de tiempo
stationPRCP<-cbind(dat_obj,stationPRCP)

stationPRCP<-window(stationPRCP[,2],start=dat$date[1],end="2015-12-31")    
# Si desea el resumen mensual puede correr las siguentes dos lineas
#monthlyprcp<-daily2monthly(stationPRCP,FUN="sum",na.rm=F)
#boxplot(ts(monthlyprcp,frequency=12)~cycle(ts(monthlyprcp,frequency=12))) 

hydroplot(stationPRCP, var.type="Presipitación", main="",
          pfreq = "ma", from=time(stationPRCP)[1],var.unit="mm",ylab="Presipitación",na.rm=F) #ptype="ts+boxplot"

# Para combinar los años con totales bajos, las próximas líneas evaluarán el número de días con los datos disponibles para crear totales anuales
annual_rain_sj<-daily2annual(stationPRCP,FUN="sum",na.rm=F)
annual_rain_sj[which(annual_rain_sj<1000)]
length(window(stationPRCP,start="1971-01-01",end="1971-12-31"))
length(window(stationPRCP,start="1972-01-01",end="1972-12-31"))
length(window(stationPRCP,start="1980-01-01",end="1980-12-31"))
length(window(stationPRCP,start="1991-01-01",end="1991-12-31")) 
