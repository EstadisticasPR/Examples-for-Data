##############################################################################
# Se utiliza el programa gratuito de análisis estadístico llamado R para obtener
# el número de entradas y salidas del tren urbano usando la data en el portal data.pr.gov.
# R o RStudio para Windows se puden bajar en https://cran.r-project.org/bin/windows/base/ o 
# https://www.rstudio.com/products/rstudio/download3/
# Este código corre en R 3.3.1 desde noviembre 29, 2016. En caso de error,
# verifique su versión de la data y de R ya que cambios pudieron haber occurido.

# NOTA: Cada línea que empieza con "#" el programa lo detecta como un comentario.

#Instrucciones: Solo debe copiar el código y pegarcon en la consola de R o RStudio, y precionar enter. Se abrirá una ventana 
#               automaticamente el cual tiene las opciones de años, meses y entradas o salidas. Seleccione un año, entrada o salida
#               y un mes. Los circulos que aparecerán en el mapa representan una proporción del los valores reales.

# Primero se preparan las herramientas necesarias para trabajar en el ejemplo.
# Se creará una función para instalar paquetes necesarios para esta aplicación. Función provista en https://gist.github.com/stevenworthington/3178163
ipak <- function(pkg){
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg)) 
    install.packages(new.pkg, dependencies = TRUE)
  sapply(pkg, require, character.only = TRUE)
}

# Ahora verificamos si el paquete data.table está instalado en su máquina. Sino, ipak lo instala y hace disponible
packages <- c("shiny","leaflet","RSocrata") # este paquete se usa para cargar la data de data.pr.gov al programa R
ipak(packages) #instala o activa paquete necesario

# Las aplicaciones estan compuestas por dos partes: 
#     ui: se diseña la aplicación
#     server: se aplican los comandos diseñados en el ui.

ui = fluidPage( # Crea un diseño de filas y columnas, estoy es para organizar nuestra aplicación.
     navbarPage("Year", # Crea una barra de navegación en la parte superior.
      tabPanel("2010", # botón para navegar en los resultados para el 2010.
        sidebarLayout(position = "right", # Crea un espacio al lado derecho de la pantalla.
          sidebarPanel(h3("Seleccione"),column(4, # Crea un panel en el espacio que se había creado en la linea anterior.
              br(), # Deja una linea en blanco.
              br(),
              checkboxInput("entradas.2010", "Entradas", FALSE), # Crea un encasillado para seleccionar entradas.
              checkboxInput("salidas.2010", "Salidas", FALSE), # Crea un encasillado para seleccionar salidas.
              checkboxGroupInput("month10", "", # Crea varios encasillados para seleccionar diferentes meces.
                                 choices=c("January" = "1", "February" = "2", "March" = "3", "April" = "4",
                                           "May"= "5", "June" = "6", "July" = "7","August" = "8", "September" = "9",
                                           "October" = "10", "November" = "11", "December" = "12"),selected = "1"))
            ),
          mainPanel( # Donde trabajamos o se expone el trabajaro principal, en este caso un mapa.
            leafletOutput("mapa2010", width = "100%", height = "400px")  # Crea un mapa.                   
          )
        )
    ),
    
 # Los pasos anteriores se repiten para los demas botones de navegación: 2011, 2012, 2013, 2014 y 2015.
      tabPanel("2011",
        sidebarLayout(position = "right",
          sidebarPanel(h3("Seleccione"),column(4,
             br(),
             br(),
             checkboxInput("entradas.2011", "Entradas", FALSE),
             checkboxInput("salidas.2011", "Salidas", FALSE),
             checkboxGroupInput("month11", 
               label = h3(""), 
               choices = list("January" = "01", "February" = "02", "March" = "03", "April" = "04",
                              "May"= "05", "June" = "06", "July" = "07","August" = "08", "September" = "09",
                              "October" = "10", "November" = "11", "December" = "12"),selected = "01"))
         ),
         mainPanel(
          leafletOutput("mapa2011", width = "100%", height = "400px")
         )
        )
      ),
    tabPanel("2012",
    sidebarLayout(position = "right",
      sidebarPanel(h3("Seleccione"),column(4,
          br(),
          br(),
          checkboxInput("entradas.2012", "Entradas", FALSE),
          checkboxInput("salidas.2012", "Salidas", FALSE),
          checkboxGroupInput("month12", 
                      label = h3(""), 
                      choices = list("January" = "01", "February" = "02", "March" = "03", "April" = "04",
                                     "May"= "05", "June" = "06", "July" = "07","August" = "08", "September" = "09",
                                     "October" = "10", "November" = "11", "December" = "12"),selected = "01"))
              ),
        mainPanel(
            leafletOutput("mapa2012", width = "100%", height = "400px")
        )
     )
    ),
    tabPanel("2013",
      sidebarLayout(position = "right",
        sidebarPanel(h3("Seleccione"),column(4,
            br(),
            br(),
            checkboxInput("entradas.2013", "Entradas", FALSE),
            checkboxInput("salidas.2013", "Salidas", FALSE),
            checkboxGroupInput("month13", 
                        label = h3(""), 
                        choices = list("January" = "01", "February" = "02", "March" = "03", "April" = "04",
                                       "May"= "05", "June" = "06", "July" = "07","August" = "08", "September" = "09",
                                        "October" = "10", "November" = "11", "December" = "12"),selected = "01"))
                ),
          mainPanel(
            leafletOutput("mapa2013", width = "100%", height = "400px")
          )
      )
    ),
    tabPanel("2014",
        sidebarLayout(position = "right",
              sidebarPanel(h3("Seleccione"),column(4,
                  br(),
                  br(),
                  checkboxInput("entradas.2014", "Entradas", FALSE),
                  checkboxInput("salidas.2014", "Salidas", FALSE),
                  checkboxGroupInput("month14", 
                            label = h3(""), 
                            choices = list("January" = "01", "February" = "02", "March" = "03", "April" = "04",
                                           "May"= "05", "June" = "06", "July" = "07","August" = "08", "September" = "09",
                                            "October" = "10", "November" = "11", "December" = "12"),selected = "01"))
            ),
         mainPanel(
              leafletOutput("mapa2014", width = "100%", height = "400px")
        )
      )
    ),
    tabPanel("2015",
        sidebarLayout(position = "right",
            sidebarPanel(h3("Seleccione"),column(4,
                br(),
                br(),
                checkboxInput("entradas.2015", "Entradas", FALSE),
                checkboxInput("salidas.2015", "Salidas", FALSE),
                checkboxGroupInput("month15", 
                            label = h3(""), 
                            choices = list("January" = "01", "February" = "02", "March" = "03", "April" = "04",
                                           "May"= "05", "June" = "06", "July" = "07","August" = "08", "September" = "09",
                                            "October" = "10", "November" = "11", "December" = "12"),selected = "01"))
            ),
        mainPanel(
          leafletOutput("mapa2015", width = "100%", height = "400px")
        )
      )
    )
  )
)

d.tren <- read.socrata("https://www.indicadores.pr/dataset/N-mero-de-pasajeros-del-Tren-Urbano-Patrocinio-Tre/yvww-vrxd",stringsAsFactors=T) # Baja la base de datos al programa.
names(d.tren)[1] <- "Fecha" # Sustituye el nombre de la primera columna de la base de datos por Fecha.

nyr <- as.character(d.tren$Fecha, format = "%Y") # Divide las fechas por año.
nm <-as.character(d.tren$Fecha,format= "%m") #Divide las fechas por meces.
d.tren <- cbind(nyr,nm,d.tren[2:35]) # Crea una base de datos nuevas que contiene año y fechas dicididas por columna

entradas<- split(d.tren[3:18],d.tren$nyr) # Extrae todas las entradas de la base de datos.
salidas<- split(d.tren[20:35],d.tren$nyr) # Extrae todas las salidas de la base de datos.

# Separa las entradas y salidas por año.
ent2010=as.data.frame(entradas$`2010`)
sal2010=as.data.frame(salidas$`2010`)
ent2011=as.data.frame(entradas$`2011`)
sal2011=as.data.frame(salidas$`2011`)
ent2012=as.data.frame(entradas$`2012`)
sal2012=as.data.frame(salidas$`2012`)
ent2013=as.data.frame(entradas$`2013`)
sal2013=as.data.frame(salidas$`2013`)
ent2014=as.data.frame(entradas$`2014`)
sal2014=as.data.frame(salidas$`2014`)
ent2015=as.data.frame(entradas$`2015`)
sal2015=as.data.frame(salidas$`2015`)
ent2016=as.data.frame(entradas$`2016`)
sal2016=as.data.frame(salidas$`2016`)

# Intercambia las colunmas por filas.
entradas2010=data.frame(t(ent2010))
salidas2010=data.frame(t(sal2010))
entradas2011=data.frame(t(ent2011))
salidas2011=data.frame(t(sal2011))
entradas2012=data.frame(t(ent2012))
salidas2012=data.frame(t(sal2012))
entradas2013=data.frame(t(ent2013))
salidas2013=data.frame(t(sal2013))
entradas2014=data.frame(t(ent2014))
salidas2014=data.frame(t(sal2014))
entradas2015=data.frame(t(ent2015))
salidas2015=data.frame(t(sal2015))

# Creamos una base de datos con los nombres de cada estación.
estacion<-c("Bayamon -","Deportivo -","Jardines -","Torrimar -","Martinez Nadal -","Las Lomas -",
            "San Francisco -","Centro Medico -","Cupey -","Rio Piedras -","Universidad -","Pinero -",
            "Domenech -","Rossevelt -","Hato Rey -","Sagrado Corazon -")

# Asignamos latitud y longitud para cada estación.
lat <- c(18.400641,18.394287,18.394109,18.391491,18.39109,18.390786,18.390806,18.39152,
         18.390395,18.398968,18.405085,18.41096,18.415581,18.423306,18.429448,18.43619)
lng <- c(-66.153781,-66.149171,-66.127984,-66.117701,-66.101877,-66.094314,-66.082522,-66.074914
         ,-66.063386,-66.05236,-66.051823,-66.055407,-66.056422,-66.058934,-66.060229,-66.060367)

# crea una base de datos con los 3 vectores de estacion, latitud y longitud.
est<-data.frame(estacion,lat,lng)

server <- function(input, output) {  # Segunda parte de la aplicación.
  # Aplicamos la información bajada de internet al mapa.
  output$mapa2010 <- renderLeaflet({
    leaflet(est) %>% addTiles() %>%
      fitBounds(~min(lng), ~min(lat), ~max(lng), ~max(lat))
  })
  
  observe({
    values <- vector(mode = "integer", length = 16) # Creamos una vector.
    
    # Ahora le damos función a los encasillados.
    if(length(input$month10) == 1 & input$entradas.2010) { 
        for(i in 1:input$month10) {
          values <- entradas2010[,i]
          }
      }
    if(length(input$month10) == 1 & input$salidas.2010) {
      for(i in 1:input$month10) {
        values <- salidas2010[,i]
      }
    }
    
    # Imprime el mapa segú los encasillados seleccionados.
    leafletProxy('mapa2010', data = est ) %>% 
      clearShapes() %>%
      addCircles(lng = ~lng, lat = ~lat, weight = 1,
                 radius = ~sqrt(values)*3, popup = ~paste(estacion, values))
    
  })

# De igual forma con los demás paneles creados al principio.
  output$mapa2011 <- renderLeaflet({
    leaflet(est) %>% addTiles() %>%
      fitBounds(~min(lng), ~min(lat), ~max(lng), ~max(lat))
  })
  
  observe({
    values <- vector(mode = "integer", length = 16)
    
    if(length(input$month11) == 1 & input$entradas.2011) {
      for(i in 1:input$month11) {
        values <- entradas2011[,i]
      }
    }
    if(length(input$month11) == 1 & input$salidas.2011) {
      for(i in 1:input$month11) {
        values <- salidas2011[,i]
      }
    }
    
    leafletProxy('mapa2011', data = est ) %>% 
      clearShapes() %>%
      addCircles(lng = ~lng, lat = ~lat, weight = 1,
                 radius = ~sqrt(values)*3, popup = ~paste(estacion, values))
  })
  
  output$mapa2012 <- renderLeaflet({
    leaflet(est) %>% addTiles() %>%
      fitBounds(~min(lng), ~min(lat), ~max(lng), ~max(lat))
  })
  
  observe({
    values <- vector(mode = "integer", length = 16)
    
    if(length(input$month12) == 1 & input$entradas.2012) {
      for(i in 1:input$month12) {
        values <- entradas2012[,i]
      }
    }
    if(length(input$month12) == 1 & input$salidas.2012) {
      for(i in 1:input$month12) {
        values <- salidas2012[,i]
      }
    }
    
    leafletProxy('mapa2012', data = est ) %>% 
      clearShapes() %>%
      addCircles(lng = ~lng, lat = ~lat, weight = 1,
                 radius = ~sqrt(values)*3, popup = ~paste(estacion, values))
  })
  output$mapa2013 <- renderLeaflet({
    leaflet(est) %>% addTiles() %>%
      fitBounds(~min(lng), ~min(lat), ~max(lng), ~max(lat))
  })
  
  observe({
    values <- vector(mode = "integer", length = 16)
    
    if(length(input$month13) == 1 & input$entradas.2013) {
      for(i in 1:input$month13) {
        values <- entradas2013[,i]
      }
    }
    if(length(input$month13) == 1 & input$salidas.2013) {
      for(i in 1:input$month13) {
        values <- salidas2013[,i]
      }
    }
    
    leafletProxy('mapa2013', data = est ) %>% 
      clearShapes() %>%
      addCircles(lng = ~lng, lat = ~lat, weight = 1,
                 radius = ~sqrt(values)*3, popup = ~paste(estacion, values))
  })
  output$mapa2014 <- renderLeaflet({
    map <-leaflet(data.frame(estacion,lat,lng)) %>% addTiles() %>%
      fitBounds(~min(lng), ~min(lat), ~max(lng), ~max(lat))
  })
  
  observe({
    values <- vector(mode = "integer", length = 16)
    
    if(length(input$month14) == 1 & input$entradas.2014) {
      for(i in 1:input$month14) {
        values <- entradas2014[,i]
      }
    }
    if(length(input$month14) == 1 & input$salidas.2014) {
      for(i in 1:input$month14) {
        values <- salidas2014[,i]
      }
    }
    
    leafletProxy('mapa2014', data = est ) %>% 
      clearShapes() %>%
      addCircles(lng = ~lng, lat = ~lat, weight = 1,
                 radius = ~sqrt(values)*3, popup = ~paste(estacion, values))
    
  })
  output$mapa2015 <- renderLeaflet({
    map <-leaflet(data.frame(estacion,lat,lng)) %>% addTiles() %>%
      fitBounds(~min(lng), ~min(lat), ~max(lng), ~max(lat))
  })
  
  observe({
    values <- vector(mode = "integer", length = 16)
    
    if(length(input$month15) == 1 & input$entradas.2015) {
      for(i in 1:input$month15) {
        values <- entradas2015[,i]
      }
    }
    if(length(input$month15) == 1 & input$salidas.2015) {
      for(i in 1:input$month15) {
        values <- salidas2015[,i]
      }
    }
    
    leafletProxy('mapa2015', data = est ) %>% 
      clearShapes() %>%
      addCircles(lng = ~lng, lat = ~lat, weight = 1,
                 radius = ~sqrt(values)*3, popup = ~paste(estacion, values))
    
  })
}

# Run the application 
shinyApp(ui = ui, server = server)

#Creado por: Angel G. Velázquez
  
  
